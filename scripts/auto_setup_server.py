#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–∏
"""

import sys
import os
import json
import subprocess
import argparse
from pathlib import Path

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...")
    
    required_packages = [
        'opencv-python',
        'numpy',
        'psutil',
        'fastapi',
        'uvicorn',
        'python-multipart'
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python –≤–µ—Ä—Å–∏—é
    python_version = sys.version_info
    if python_version < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        return False
    
    print(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º pip
    try:
        import pip
        print("‚úÖ pip –¥–æ—Å—Ç—É–ø–µ–Ω")
    except ImportError:
        print("‚ùå pip –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ffmpeg
    try:
        result = subprocess.run(['ffprobe', '-version'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            print("‚úÖ ffmpeg/ffprobe —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print("‚ö†Ô∏è ffmpeg/ffprobe –Ω–µ –Ω–∞–π–¥–µ–Ω - –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            install_ffmpeg()
    except (subprocess.TimeoutExpired, FileNotFoundError):
        print("‚ö†Ô∏è ffmpeg/ffprobe –Ω–µ –Ω–∞–π–¥–µ–Ω - –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        install_ffmpeg()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º GPU –ø–æ–¥–¥–µ—Ä–∂–∫—É
    check_gpu_support()
    
    return True

def install_ffmpeg():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç ffmpeg"""
    print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ffmpeg...")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
        if os.name == 'posix':  # Unix-like —Å–∏—Å—Ç–µ–º—ã
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ brew (macOS)
            try:
                subprocess.run(['brew', '--version'], check=True, capture_output=True)
                subprocess.run(['brew', 'install', 'ffmpeg'], check=True)
                print("‚úÖ ffmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Homebrew")
                return
            except (subprocess.CalledProcessError, FileNotFoundError):
                pass
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º apt (Ubuntu/Debian)
            try:
                subprocess.run(['apt', '--version'], check=True, capture_output=True)
                subprocess.run(['sudo', 'apt', 'update'], check=True)
                subprocess.run(['sudo', 'apt', 'install', '-y', 'ffmpeg'], check=True)
                print("‚úÖ ffmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ apt")
                return
            except (subprocess.CalledProcessError, FileNotFoundError):
                pass
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º yum (CentOS/RHEL)
            try:
                subprocess.run(['yum', '--version'], check=True, capture_output=True)
                subprocess.run(['sudo', 'yum', 'install', '-y', 'ffmpeg'], check=True)
                print("‚úÖ ffmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ yum")
                return
            except (subprocess.CalledProcessError, FileNotFoundError):
                pass
        
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ffmpeg –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ffmpeg –≤—Ä—É—á–Ω—É—é –¥–ª—è –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ffmpeg: {str(e)}")

def check_gpu_support():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É GPU"""
    print("üéÆ –ü—Ä–æ–≤–µ—Ä—è–µ–º GPU –ø–æ–¥–¥–µ—Ä–∂–∫—É...")
    
    gpu_info = {"available": False, "type": None}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º PyTorch MPS (Apple Metal)
    try:
        import torch
        if torch.backends.mps.is_available() and torch.backends.mps.is_built():
            gpu_info["available"] = True
            gpu_info["type"] = "MPS"
            print("‚úÖ Apple Metal (MPS) –¥–æ—Å—Ç—É–ø–µ–Ω")
            return gpu_info
    except ImportError:
        pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º CUDA
    try:
        import torch
        if torch.cuda.is_available():
            gpu_info["available"] = True
            gpu_info["type"] = "CUDA"
            print("‚úÖ CUDA –¥–æ—Å—Ç—É–ø–µ–Ω")
            return gpu_info
    except ImportError:
        pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º CuPy
    try:
        import cupy as cp
        gpu_info["available"] = True
        gpu_info["type"] = "CUDA"
        print("‚úÖ CuPy (CUDA) –¥–æ—Å—Ç—É–ø–µ–Ω")
        return gpu_info
    except ImportError:
        pass
    
    print("‚ö†Ô∏è GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
    return gpu_info

def create_server_config():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞"""
    print("‚öôÔ∏è –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞...")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))
    
    try:
        from dive_color_corrector.mobile_correct import get_performance_info
        current_config = get_performance_info()
    except ImportError:
        # –ï—Å–ª–∏ –º–æ–¥—É–ª–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        current_config = {
            "batch_size": 32,
            "max_processes": 4,
            "video_quality": 80,
            "use_gpu": False
        }
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞
    server_config = {
        "server_info": {
            "setup_date": subprocess.check_output(['date']).decode().strip(),
            "python_version": f"{sys.version_info.major}.{sys.version_info.minor}.{sys.version_info.micro}",
            "platform": os.name
        },
        "performance_settings": current_config,
        "gpu_info": check_gpu_support(),
        "recommendations": {
            "auto_optimize": True,
            "monitoring_enabled": True,
            "log_level": "INFO"
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_path = "server_setup_config.json"
    with open(config_path, 'w', encoding='utf-8') as f:
        json.dump(server_config, f, indent=2, ensure_ascii=False)
    
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {config_path}")
    return config_path

def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üìù –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging_config = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "standard": {
                "format": "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
            }
        },
        "handlers": {
            "default": {
                "level": "INFO",
                "formatter": "standard",
                "class": "logging.StreamHandler"
            },
            "file": {
                "level": "DEBUG",
                "formatter": "standard",
                "class": "logging.FileHandler",
                "filename": "logs/server.log",
                "mode": "a"
            }
        },
        "loggers": {
            "": {
                "handlers": ["default", "file"],
                "level": "INFO",
                "propagate": False
            }
        }
    }
    
    config_path = "logging_config.json"
    with open(config_path, 'w', encoding='utf-8') as f:
        json.dump(logging_config, f, indent=2)
    
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {config_path}")

def create_startup_script():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üöÄ –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞...")
    
    startup_script = """#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ

echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python3 –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
if [ ! -d "src" ]; then
    echo "‚ùå –ü–∞–ø–∫–∞ src –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    exit 1
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
echo "‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä..."
python3 app.py

echo "üõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
"""
    
    script_path = "start_server.sh"
    with open(script_path, 'w', encoding='utf-8') as f:
        f.write(startup_script)
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
    os.chmod(script_path, 0o755)
    
    print(f"‚úÖ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω: {script_path}")

def main():
    parser = argparse.ArgumentParser(description='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞')
    parser.add_argument('--skip-deps', action='store_true',
                       help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π')
    parser.add_argument('--skip-ffmpeg', action='store_true',
                       help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É ffmpeg')
    
    args = parser.parse_args()
    
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê –°–ï–†–í–ï–†–ê")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not args.skip_deps:
        if not check_dependencies():
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
            return 1
    
    # 2. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_path = create_server_config()
    
    # 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging()
    
    # 4. –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
    create_startup_script()
    
    print("\n" + "=" * 50)
    print("‚úÖ –ù–ê–°–¢–†–û–ô–ö–ê –°–ï–†–í–ï–†–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 50)
    
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é: python scripts/remote_server_optimizer.py")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: ./start_server.sh")
    print("3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: python scripts/performance_monitor.py")
    
    print(f"\nüíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {config_path}")
    print("üéâ –°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    return 0

if __name__ == "__main__":
    exit(main())
