#!/usr/bin/env python3
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è Python API Server
–í–∫–ª—é—á–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
"""

import json
import os
import subprocess
import sys
import time
from pathlib import Path
from typing import Dict, Any

def load_config(config_path: str = "server_config.json") -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ: {e}")
        sys.exit(1)

def clear_ssh_host_key(host: str) -> bool:
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–π SSH –∫–ª—é—á —Ö–æ—Å—Ç–∞"""
    try:
        print(f"üîë –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π SSH –∫–ª—é—á –¥–ª—è {host}...")
        result = subprocess.run(
            ["ssh-keygen", "-R", host], 
            capture_output=True, 
            text=True, 
            timeout=30
        )
        if result.returncode == 0:
            print(f"‚úÖ SSH –∫–ª—é—á –¥–ª—è {host} –æ—á–∏—â–µ–Ω")
            return True
        else:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å SSH –∫–ª—é—á: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ SSH –∫–ª—é—á–∞: {e}")
        return False

def run_ssh_command(host: str, username: str, password: str, command: str) -> bool:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ SSH"""
    try:
        cmd = [
            "sshpass", "-p", password,
            f"{username}@{host}",
            command
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
        
        if result.returncode == 0:
            print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            if result.stdout.strip():
                print(f"üì§ –í—ã–≤–æ–¥: {result.stdout.strip()}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
        return False
    except FileNotFoundError:
        print("‚ùå sshpass –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install hudochenkov/sshpass/sshpass")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SSH: {e}")
        return False

def copy_files_to_server(host: str, username: str, password: str, local_path: str, remote_path: str) -> bool:
    """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
    try:
        cmd = [
            "sshpass", "-p", password,
            "rsync", "-avz", "--progress",
            "--exclude=.git",
            "--exclude=__pycache__",
            "--exclude='*.pyc'",
            "--exclude=.env",
            "--exclude=uploads/",
            "--exclude=outputs/",
            "--exclude=logs/",
            f"{local_path}/",
            f"{username}@{host}:{remote_path}/"
        ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)
        
        if result.returncode == 0:
            print(f"‚úÖ –§–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
        return False
    except FileNotFoundError:
        print("‚ùå rsync –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install rsync")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def check_server_connection(host: str, username: str, password: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º"""
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º {host}...")
    return run_ssh_command(host, username, password, "echo 'Connection successful'")

def prepare_docker_files(host: str, username: str, password: str, app_name: str) -> bool:
    """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç Docker —Ñ–∞–π–ª—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ"""
    print("üê≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º Docker —Ñ–∞–π–ª—ã...")
    
    # –ö–æ–ø–∏—Ä—É–µ–º docker-compose.yml –≤ –∫–æ—Ä–µ–Ω—å
    if not run_ssh_command(host, username, password, f"cd /opt/{app_name} && cp docker/docker-compose.yml ."):
        return False
    
    # –ö–æ–ø–∏—Ä—É–µ–º Dockerfile –≤ –∫–æ—Ä–µ–Ω—å
    if not run_ssh_command(host, username, password, f"cd /opt/{app_name} && cp docker/Dockerfile ."):
        return False
    
    print("‚úÖ Docker —Ñ–∞–π–ª—ã –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã")
    return True

def deploy_to_server(config: Dict[str, Any]) -> bool:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    server_config = config["server"]
    deployment_config = config["deployment"]
    
    host = server_config["host"]
    username = server_config["username"]
    password = server_config["password"]
    app_name = deployment_config["app_name"]
    
    print(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ {app_name} –Ω–∞ {host}")
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π SSH –∫–ª—é—á
    clear_ssh_host_key(host)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if not check_server_connection(host, username, password):
        return False
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    print("üìã –ö–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...")
    if not copy_files_to_server(host, username, password, "scripts/deploy_optimized.sh", "/tmp/"):
        return False
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
    print("üîß –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è...")
    if not run_ssh_command(host, username, password, "chmod +x /tmp/deploy_optimized.sh && /tmp/deploy_optimized.sh"):
        return False
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
    print("üìÅ –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    if not copy_files_to_server(host, username, password, ".", f"/opt/{app_name}"):
        return False
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º Docker —Ñ–∞–π–ª—ã
    if not prepare_docker_files(host, username, password, app_name):
        return False
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º systemd —Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
    print("‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º systemd —Å–µ—Ä–≤–∏—Å...")
    run_ssh_command(host, username, password, f"systemctl stop {app_name}.service")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    print("üê≥ –ó–∞–ø—É—Å–∫–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã...")
    if not run_ssh_command(host, username, password, f"cd /opt/{app_name} && docker-compose down && docker-compose up -d api redis"):
        return False
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    print("‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    time.sleep(15)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
    if not run_ssh_command(host, username, password, f"cd /opt/{app_name} && docker-compose ps"):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    print("üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API...")
    if not run_ssh_command(host, username, password, f"curl -f http://localhost:{deployment_config['app_port']}/health"):
        print("‚ö†Ô∏è API –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º systemd —Å–µ—Ä–≤–∏—Å
    print("üîß –ó–∞–ø—É—Å–∫–∞–µ–º systemd —Å–µ—Ä–≤–∏—Å...")
    if not run_ssh_command(host, username, password, f"systemctl start {app_name}.service"):
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å systemd —Å–µ—Ä–≤–∏—Å, –Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    print("üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...")
    time.sleep(5)
    if not run_ssh_command(host, username, password, f"curl -f http://localhost:{deployment_config['app_port']}/health"):
        print("‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ systemd —Å–µ—Ä–≤–∏—Å–∞")
    
    print("üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üåê API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://{host}:{deployment_config['app_port']}")
    print(f"üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://{host}:{deployment_config['app_port']}/docs")
    print(f"üì± –ú–æ–±–∏–ª—å–Ω—ã–π API: http://{host}:{deployment_config['app_port']}/api/mobile/status")
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üêç Python API Server Deployer (Improved)")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    config_path = "server_config.json"
    if len(sys.argv) > 1:
        config_path = sys.argv[1]
    
    if not os.path.exists(config_path):
        print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª server_config.json —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞")
        sys.exit(1)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config(config_path)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
    required_fields = ["server.host", "server.username", "server.password", "deployment.app_name"]
    for field in required_fields:
        keys = field.split(".")
        current = config
        for key in keys:
            if key not in current:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                sys.exit(1)
            current = current[key]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ
    try:
        success = deploy_to_server(config)
        if success:
            print("\n‚úÖ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            sys.exit(0)
        else:
            print("\n‚ùå –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

