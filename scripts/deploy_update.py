#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
"""

import json
import os
import subprocess
import sys
import time
from typing import Dict, Any

def load_config(config_path: str) -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ: {e}")
        sys.exit(1)

def run_ssh_command(host: str, username: str, auth_method: str, password: str = None, ssh_key_path: str = None, command: str = "") -> bool:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–æ SSH"""
    try:
        if auth_method == "ssh_key" and ssh_key_path:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SSH –∫–ª—é—á
            expanded_key_path = os.path.expanduser(ssh_key_path)
            cmd = [
                "ssh", "-i", expanded_key_path,
                "-o", "StrictHostKeyChecking=no",
                f"{username}@{host}",
                command
            ]
        elif auth_method == "password":
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ sshpass
            if not password:
                print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –ø–∞—Ä–æ–ª—é")
                return False
            cmd = [
                "sshpass", "-p", password,
                "ssh", "-o", "StrictHostKeyChecking=no",
                f"{username}@{host}",
                command
            ]
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            return False
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=300)
        
        if result.returncode == 0:
            print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            if result.stdout.strip():
                print(f"üì§ –í—ã–≤–æ–¥: {result.stdout.strip()}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SSH: {e}")
        return False

def copy_files_to_server(host: str, username: str, auth_method: str, password: str = None, ssh_key_path: str = None, local_path: str = "", remote_path: str = "") -> bool:
    """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä"""
    try:
        if auth_method == "ssh_key" and ssh_key_path:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º SSH –∫–ª—é—á
            expanded_key_path = os.path.expanduser(ssh_key_path)
            cmd = [
                "rsync", "-avz", "--progress",
                "-e", f"ssh -i {expanded_key_path} -o StrictHostKeyChecking=no",
                "--exclude=.git",
                "--exclude=__pycache__",
                "--exclude='*.pyc'",
                "--exclude=.env",
                "--exclude=uploads/",
                "--exclude=outputs/",
                "--exclude=logs/",
                f"{local_path}/",
                f"{username}@{host}:{remote_path}/"
            ]
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ sshpass
            if not password:
                print("‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ –ø–∞—Ä–æ–ª—é")
                return False
            cmd = [
                "sshpass", "-p", password,
                "rsync", "-avz", "--progress",
                "-e", "ssh -o StrictHostKeyChecking=no",
                "--exclude=.git",
                "--exclude=__pycache__",
                "--exclude='*.pyc'",
                "--exclude=.env",
                "--exclude=uploads/",
                "--exclude=outputs/",
                "--exclude=logs/",
                f"{local_path}/",
                f"{username}@{host}:{remote_path}/"
            ]
        
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=600)
        
        if result.returncode == 0:
            print(f"‚úÖ –§–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–∞–π–º–∞—É—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
        return False
    except FileNotFoundError:
        print("‚ùå rsync –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: brew install rsync")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def update_server(config: Dict[str, Any]) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
    server_config = config["server"]
    deployment_config = config.get("deployment", {})
    
    host = server_config["host"]
    username = server_config["username"]
    auth_method = server_config.get("auth_method", "password")
    password = server_config.get("password")
    ssh_key_path = server_config.get("ssh_key_path")
    app_name = deployment_config.get("app_name", "dive-color-corrector")
    
    print(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º {app_name} –Ω–∞ {host}")
    print(f"üîê –ú–µ—Ç–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {auth_method}")
    
    # –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
    print("üìÅ –ö–æ–ø–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–æ–¥...")
    if not copy_files_to_server(host, username, auth_method, password, ssh_key_path, ".", f"/opt/{app_name}"):
        return False
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º Docker —Ñ–∞–π–ª—ã
    print("üê≥ –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º Docker —Ñ–∞–π–ª—ã...")
    if not run_ssh_command(host, username, auth_method, password, ssh_key_path, f"cd /opt/{app_name} && mkdir -p nginx && cp docker/nginx/nginx.conf nginx/"):
        return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
    if not run_ssh_command(host, username, auth_method, password, ssh_key_path, f"cd /opt/{app_name} && chmod +x update.sh && ./update.sh"):
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
    time.sleep(10)
    if not run_ssh_command(host, username, auth_method, password, ssh_key_path, f"curl -f http://localhost/health"):
        print("‚ö†Ô∏è API –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return False
    
    print("üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    print(f"üåê API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://{host}")
    print(f"üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: http://{host}/docs")
    print(f"üì± –ú–æ–±–∏–ª—å–Ω—ã–π API: http://{host}/api/mobile/status")
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîÑ Python API Server Updater")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    config_path = "server_config.json"
    if len(sys.argv) > 1:
        config_path = sys.argv[1]
    
    if not os.path.exists(config_path):
        print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª server_config.json –Ω–∞ –æ—Å–Ω–æ–≤–µ server_config.example.json")
        sys.exit(1)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config(config_path)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
    required_fields = ["server.host", "server.username", "server.password"]
    for field in required_fields:
        keys = field.split(".")
        current = config
        for key in keys:
            if key not in current:
                print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field} –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
                sys.exit(1)
            current = current[key]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä
    if update_server(config):
        print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        sys.exit(1)

if __name__ == "__main__":
    main()
