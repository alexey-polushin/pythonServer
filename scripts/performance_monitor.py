#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
"""

import sys
import os
import time
import psutil
import json
import argparse
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from dive_color_corrector.mobile_correct import get_performance_info

class PerformanceMonitor:
    def __init__(self, log_file=None):
        self.log_file = log_file
        self.start_time = time.time()
        self.monitoring = False
        
    def get_system_stats(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        # CPU
        cpu_percent = psutil.cpu_percent(interval=1)
        cpu_freq = psutil.cpu_freq()
        
        # –ü–∞–º—è—Ç—å
        memory = psutil.virtual_memory()
        swap = psutil.swap_memory()
        
        # –î–∏—Å–∫
        disk = psutil.disk_usage('/')
        
        # –°–µ—Ç—å
        network = psutil.net_io_counters()
        
        # –ü—Ä–æ—Ü–µ—Å—Å—ã
        processes = len(psutil.pids())
        
        # GPU (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
        gpu_usage = None
        try:
            import torch
            if torch.backends.mps.is_available():
                # –î–ª—è MPS –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ —Å–ø–æ—Å–æ–±–∞ –ø–æ–ª—É—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                gpu_usage = "MPS Available"
            elif torch.cuda.is_available():
                gpu_usage = f"CUDA: {torch.cuda.memory_allocated() / 1024**3:.2f}GB"
        except ImportError:
            pass
        
        return {
            "timestamp": datetime.now().isoformat(),
            "uptime": time.time() - self.start_time,
            "cpu": {
                "usage_percent": cpu_percent,
                "frequency_mhz": cpu_freq.current if cpu_freq else 0,
                "cores": psutil.cpu_count(logical=True)
            },
            "memory": {
                "total_gb": round(memory.total / (1024**3), 2),
                "used_gb": round(memory.used / (1024**3), 2),
                "available_gb": round(memory.available / (1024**3), 2),
                "usage_percent": memory.percent
            },
            "swap": {
                "total_gb": round(swap.total / (1024**3), 2),
                "used_gb": round(swap.used / (1024**3), 2),
                "usage_percent": swap.percent
            },
            "disk": {
                "total_gb": round(disk.total / (1024**3), 2),
                "used_gb": round(disk.used / (1024**3), 2),
                "free_gb": round(disk.free / (1024**3), 2),
                "usage_percent": round((disk.used / disk.total) * 100, 2)
            },
            "network": {
                "bytes_sent": network.bytes_sent,
                "bytes_recv": network.bytes_recv,
                "packets_sent": network.packets_sent,
                "packets_recv": network.packets_recv
            },
            "processes": processes,
            "gpu": gpu_usage
        }
    
    def get_video_processing_stats(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"""
        try:
            perf_info = get_performance_info()
            return {
                "video_quality": perf_info.get("video_quality", 0),
                "batch_size": perf_info.get("batch_size", 0),
                "max_processes": perf_info.get("max_processes", 0),
                "use_gpu": perf_info.get("use_gpu", False),
                "gpu_type": perf_info.get("gpu_type", "None")
            }
        except Exception as e:
            return {"error": str(e)}
    
    def log_stats(self, stats):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª"""
        if self.log_file:
            with open(self.log_file, 'a', encoding='utf-8') as f:
                f.write(json.dumps(stats) + '\n')
    
    def print_stats(self, stats, video_stats):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å"""
        # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
        os.system('clear' if os.name == 'posix' else 'cls')
        
        print("üñ•Ô∏è  –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –°–ï–†–í–ï–†–ê")
        print("=" * 60)
        print(f"‚è∞ –í—Ä–µ–º—è: {stats['timestamp']}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats['uptime']:.0f} —Å–µ–∫")
        print()
        
        # CPU
        cpu_color = "üü¢" if stats['cpu']['usage_percent'] < 70 else "üü°" if stats['cpu']['usage_percent'] < 90 else "üî¥"
        print(f"{cpu_color} CPU: {stats['cpu']['usage_percent']:.1f}% ({stats['cpu']['cores']} —è–¥–µ—Ä, {stats['cpu']['frequency_mhz']:.0f} MHz)")
        
        # –ü–∞–º—è—Ç—å
        mem_color = "üü¢" if stats['memory']['usage_percent'] < 70 else "üü°" if stats['memory']['usage_percent'] < 90 else "üî¥"
        print(f"{mem_color} –ü–∞–º—è—Ç—å: {stats['memory']['usage_percent']:.1f}% ({stats['memory']['used_gb']:.1f}/{stats['memory']['total_gb']:.1f} GB)")
        
        # –î–∏—Å–∫
        disk_color = "üü¢" if stats['disk']['usage_percent'] < 70 else "üü°" if stats['disk']['usage_percent'] < 90 else "üî¥"
        print(f"{disk_color} –î–∏—Å–∫: {stats['disk']['usage_percent']:.1f}% ({stats['disk']['used_gb']:.1f}/{stats['disk']['total_gb']:.1f} GB)")
        
        # Swap
        if stats['swap']['total_gb'] > 0:
            swap_color = "üü¢" if stats['swap']['usage_percent'] < 10 else "üü°" if stats['swap']['usage_percent'] < 30 else "üî¥"
            print(f"{swap_color} Swap: {stats['swap']['usage_percent']:.1f}% ({stats['swap']['used_gb']:.1f}/{stats['swap']['total_gb']:.1f} GB)")
        
        # –ü—Ä–æ—Ü–µ—Å—Å—ã
        print(f"üìä –ü—Ä–æ—Ü–µ—Å—Å—ã: {stats['processes']}")
        
        # GPU
        if stats['gpu']:
            print(f"üéÆ GPU: {stats['gpu']}")
        
        print()
        print("üé¨ –ù–ê–°–¢–†–û–ô–ö–ò –û–ë–†–ê–ë–û–¢–ö–ò –í–ò–î–ï–û:")
        if 'error' not in video_stats:
            print(f"   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: {video_stats.get('video_quality', 0)}%")
            print(f"   ‚Ä¢ Batch size: {video_stats.get('batch_size', 0)}")
            print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å—ã: {video_stats.get('max_processes', 0)}")
            print(f"   ‚Ä¢ GPU: {'–í–∫–ª—é—á–µ–Ω' if video_stats.get('use_gpu') else '–í—ã–∫–ª—é—á–µ–Ω'}")
            if video_stats.get('gpu_type'):
                print(f"   ‚Ä¢ –¢–∏–ø GPU: {video_stats.get('gpu_type')}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {video_stats['error']}")
        
        print()
        print("üìà –°–ï–¢–¨:")
        print(f"   ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats['network']['bytes_sent'] / 1024 / 1024:.1f} MB")
        print(f"   ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ: {stats['network']['bytes_recv'] / 1024 / 1024:.1f} MB")
        
        print()
        print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    
    def start_monitoring(self, interval=2):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        self.monitoring = True
        print("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        try:
            while self.monitoring:
                stats = self.get_system_stats()
                video_stats = self.get_video_processing_stats()
                
                self.print_stats(stats, video_stats)
                self.log_stats({**stats, "video_processing": video_stats})
                
                time.sleep(interval)
                
        except KeyboardInterrupt:
            print("\n\n‚èπÔ∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            self.monitoring = False

def main():
    parser = argparse.ArgumentParser(description='–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞')
    parser.add_argument('--interval', type=int, default=2,
                       help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2)')
    parser.add_argument('--log-file', 
                       help='–§–∞–π–ª –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
    parser.add_argument('--once', action='store_true',
                       help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–¥–∏–Ω —Ä–∞–∑ –∏ –≤—ã–π—Ç–∏')
    
    args = parser.parse_args()
    
    monitor = PerformanceMonitor(log_file=args.log_file)
    
    if args.once:
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–¥–∏–Ω —Ä–∞–∑
        stats = monitor.get_system_stats()
        video_stats = monitor.get_video_processing_stats()
        monitor.print_stats(stats, video_stats)
    else:
        # –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        monitor.start_monitoring(interval=args.interval)

if __name__ == "__main__":
    main()
