#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
"""

import sys
import os
import json
import time
import psutil
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from dive_color_corrector.mobile_correct import configure_performance, get_performance_info

def detect_server_characteristics():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    # CPU –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    cpu_count = psutil.cpu_count(logical=True)
    cpu_freq = psutil.cpu_freq()
    cpu_usage = psutil.cpu_percent(interval=1)
    
    # –ü–∞–º—è—Ç—å
    memory = psutil.virtual_memory()
    swap = psutil.swap_memory()
    
    # –î–∏—Å–∫
    disk = psutil.disk_usage('/')
    
    # GPU (–ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å)
    gpu_available = False
    gpu_type = None
    
    try:
        import torch
        if torch.backends.mps.is_available() and torch.backends.mps.is_built():
            gpu_available = True
            gpu_type = "MPS"
        elif torch.cuda.is_available():
            gpu_available = True
            gpu_type = "CUDA"
    except ImportError:
        pass
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º CuPy
    if not gpu_available:
        try:
            import cupy as cp
            gpu_available = True
            gpu_type = "CUDA"
        except ImportError:
            pass
    
    characteristics = {
        "cpu": {
            "cores": cpu_count,
            "frequency_mhz": cpu_freq.max if cpu_freq else 0,
            "usage_percent": cpu_usage
        },
        "memory": {
            "total_gb": round(memory.total / (1024**3), 2),
            "available_gb": round(memory.available / (1024**3), 2),
            "usage_percent": memory.percent
        },
        "disk": {
            "total_gb": round(disk.total / (1024**3), 2),
            "free_gb": round(disk.free / (1024**3), 2),
            "usage_percent": round((disk.used / disk.total) * 100, 2)
        },
        "gpu": {
            "available": gpu_available,
            "type": gpu_type
        }
    }
    
    return characteristics

def recommend_optimal_settings(characteristics):
    """–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
    
    cpu_cores = characteristics["cpu"]["cores"]
    memory_gb = characteristics["memory"]["total_gb"]
    gpu_available = characteristics["gpu"]["available"]
    gpu_type = characteristics["gpu"]["type"]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å–µ—Ä–≤–µ—Ä–∞
    if cpu_cores >= 16 and memory_gb >= 32:
        server_profile = "high_end"
    elif cpu_cores >= 8 and memory_gb >= 16:
        server_profile = "mid_range"
    elif cpu_cores >= 4 and memory_gb >= 8:
        server_profile = "standard"
    else:
        server_profile = "low_end"
    
    # –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if server_profile == "high_end":
        settings = {
            "batch_size": 128,
            "max_processes": min(cpu_cores, 16),
            "video_quality": 90,
            "use_gpu": gpu_available,
            "profile": "high_end"
        }
    elif server_profile == "mid_range":
        settings = {
            "batch_size": 64,
            "max_processes": min(cpu_cores, 8),
            "video_quality": 85,
            "use_gpu": gpu_available,
            "profile": "mid_range"
        }
    elif server_profile == "standard":
        settings = {
            "batch_size": 32,
            "max_processes": min(cpu_cores, 4),
            "video_quality": 80,
            "use_gpu": gpu_available,
            "profile": "standard"
        }
    else:  # low_end
        settings = {
            "batch_size": 16,
            "max_processes": min(cpu_cores, 2),
            "video_quality": 75,
            "use_gpu": False,  # –û—Ç–∫–ª—é—á–∞–µ–º GPU –¥–ª—è —Å–ª–∞–±—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
            "profile": "low_end"
        }
    
    return settings, server_profile

def test_performance_settings(settings, test_video_path="tests/sample.mp4"):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    print("‚ö° –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å...")
    
    if not os.path.exists(test_video_path):
        print(f"‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {test_video_path}")
        return None
    
    try:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        configure_performance(
            batch_size=settings["batch_size"],
            max_processes=settings["max_processes"],
            video_quality=settings["video_quality"],
            use_gpu=settings["use_gpu"]
        )
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        from dive_color_corrector.mobile_correct import analyze_video_mobile
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º
        output_path = "tests/remote_optimization_test.mp4"
        start_time = time.time()
        
        video_data = analyze_video_mobile(test_video_path, output_path)
        
        total_time = time.time() - start_time
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if os.path.exists(output_path):
            original_size = os.path.getsize(test_video_path)
            output_size = os.path.getsize(output_path)
            
            results = {
                "total_time": total_time,
                "fps_achieved": video_data.get("frame_count", 0) / total_time if total_time > 0 else 0,
                "size_ratio": output_size / original_size if original_size > 0 else 0,
                "success": True
            }
        else:
            results = {"success": False, "error": "Output file not created"}
        
        return results
        
    except Exception as e:
        return {"success": False, "error": str(e)}

def save_server_config(characteristics, settings, test_results):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–µ—Ä–∞"""
    config = {
        "server_characteristics": characteristics,
        "optimal_settings": settings,
        "test_results": test_results,
        "optimization_date": time.strftime("%Y-%m-%d %H:%M:%S"),
        "server_id": f"{characteristics['cpu']['cores']}c_{characteristics['memory']['total_gb']}gb_{characteristics['gpu']['type'] or 'cpu'}"
    }
    
    config_path = "server_optimization_config.json"
    with open(config_path, 'w', encoding='utf-8') as f:
        json.dump(config, f, indent=2, ensure_ascii=False)
    
    return config_path

def print_optimization_report(characteristics, settings, server_profile, test_results):
    """–í—ã–≤–æ–¥–∏—Ç –æ—Ç—á–µ—Ç –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
    print("\n" + "="*60)
    print("üöÄ –û–¢–ß–ï–¢ –û–ë –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –£–î–ê–õ–ï–ù–ù–û–ì–û –°–ï–†–í–ï–†–ê")
    print("="*60)
    
    print(f"\nüìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:")
    print(f"   ‚Ä¢ CPU —è–¥–µ—Ä: {characteristics['cpu']['cores']}")
    print(f"   ‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ CPU: {characteristics['cpu']['frequency_mhz']} MHz")
    print(f"   ‚Ä¢ –ü–∞–º—è—Ç—å: {characteristics['memory']['total_gb']} GB")
    print(f"   ‚Ä¢ –î–∏—Å–∫: {characteristics['disk']['total_gb']} GB")
    print(f"   ‚Ä¢ GPU: {'‚úÖ ' + characteristics['gpu']['type'] if characteristics['gpu']['available'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
    
    print(f"\nüéØ –ü—Ä–æ—Ñ–∏–ª—å —Å–µ—Ä–≤–µ—Ä–∞: {server_profile.upper()}")
    
    print(f"\n‚öôÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    print(f"   ‚Ä¢ Batch size: {settings['batch_size']}")
    print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å—ã: {settings['max_processes']}")
    print(f"   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {settings['video_quality']}%")
    print(f"   ‚Ä¢ GPU: {'–í–∫–ª—é—á–µ–Ω' if settings['use_gpu'] else '–í—ã–∫–ª—é—á–µ–Ω'}")
    
    if test_results and test_results.get('success'):
        print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   ‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {test_results['total_time']:.2f} —Å–µ–∫")
        print(f"   ‚Ä¢ FPS: {test_results['fps_achieved']:.2f}")
        print(f"   ‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤: {test_results['size_ratio']:.2f}x")
    elif test_results:
        print(f"\n‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {test_results.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
    
    print(f"\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

def main():
    parser = argparse.ArgumentParser(description='–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞')
    parser.add_argument('--test-video', default='tests/sample.mp4', 
                       help='–ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É –≤–∏–¥–µ–æ')
    parser.add_argument('--skip-test', action='store_true',
                       help='–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏')
    parser.add_argument('--force-profile', choices=['high_end', 'mid_range', 'standard', 'low_end'],
                       help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å–µ—Ä–≤–µ—Ä–∞')
    
    args = parser.parse_args()
    
    print("üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
    print("="*50)
    
    # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
    characteristics = detect_server_characteristics()
    
    # 2. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    settings, server_profile = recommend_optimal_settings(characteristics)
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    if args.force_profile:
        settings["profile"] = args.force_profile
        server_profile = args.force_profile
        print(f"üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å: {args.force_profile}")
    
    # 3. –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("‚öôÔ∏è –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
    configure_performance(
        batch_size=settings["batch_size"],
        max_processes=settings["max_processes"],
        video_quality=settings["video_quality"],
        use_gpu=settings["use_gpu"]
    )
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ)
    test_results = None
    if not args.skip_test:
        test_results = test_performance_settings(settings, args.test_video)
    
    # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config_path = save_server_config(characteristics, settings, test_results)
    
    # 5. –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
    print_optimization_report(characteristics, settings, server_profile, test_results)
    
    print(f"\nüíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {config_path}")
    print("\nüéâ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    main()
