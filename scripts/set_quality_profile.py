#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª–µ–π –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ
"""

import sys
import os
import json
import argparse

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from dive_color_corrector.mobile_correct import configure_performance, get_performance_info

def load_quality_profiles():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
    profiles_path = os.path.join(os.path.dirname(__file__), '..', 'quality_profiles.json')
    try:
        with open(profiles_path, 'r', encoding='utf-8') as f:
            return json.load(f)['quality_profiles']
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª quality_profiles.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return {}
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–∞–π–ª–∞ quality_profiles.json")
        return {}

def list_profiles():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏"""
    profiles = load_quality_profiles()
    if not profiles:
        return
    
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞:")
    print()
    
    for key, profile in profiles.items():
        print(f"üéØ {profile['name']} ({key})")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {profile['description']}")
        print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {profile['video_quality']}%")
        print(f"   –û–∂–∏–¥–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: {profile['expected_size_ratio']}x –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞")
        print(f"   –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: {', '.join(profile['use_cases'])}")
        print()

def apply_profile(profile_key):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∫–∞—á–µ—Å—Ç–≤–∞"""
    profiles = load_quality_profiles()
    if profile_key not in profiles:
        print(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å '{profile_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    profile = profiles[profile_key]
    
    print(f"üéØ –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å: {profile['name']}")
    print(f"   –ö–∞—á–µ—Å—Ç–≤–æ: {profile['video_quality']}%")
    print(f"   Batch size: {profile['batch_size']}")
    print(f"   –ü—Ä–æ—Ü–µ—Å—Å—ã: {profile['max_processes']}")
    print(f"   GPU: {'–í–∫–ª—é—á–µ–Ω' if profile['use_gpu'] else '–í—ã–∫–ª—é—á–µ–Ω'}")
    print()
    
    try:
        configure_performance(
            batch_size=profile['batch_size'],
            max_processes=profile['max_processes'],
            video_quality=profile['video_quality'],
            use_gpu=profile['use_gpu']
        )
        
        print("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        current = get_performance_info()
        print()
        print("üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
        print(f"   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {current['video_quality']}%")
        print(f"   ‚Ä¢ Batch size: {current['batch_size']}")
        print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å—ã: {current['max_processes']}")
        print(f"   ‚Ä¢ GPU: {'–í–∫–ª—é—á–µ–Ω' if current['use_gpu'] else '–í—ã–∫–ª—é—á–µ–Ω'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}")
        return False

def show_current():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        current = get_performance_info()
        print("üìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:")
        print(f"   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ: {current['video_quality']}%")
        print(f"   ‚Ä¢ Batch size: {current['batch_size']}")
        print(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å—ã: {current['max_processes']}")
        print(f"   ‚Ä¢ GPU: {'–í–∫–ª—é—á–µ–Ω' if current['use_gpu'] else '–í—ã–∫–ª—é—á–µ–Ω'}")
        print(f"   ‚Ä¢ –¢–∏–ø GPU: {current.get('gpu_type', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω')}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}")

def main():
    parser = argparse.ArgumentParser(description='–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ')
    parser.add_argument('action', nargs='?', choices=['list', 'current', 'set'], 
                       help='–î–µ–π—Å—Ç–≤–∏–µ: list (—Å–ø–∏—Å–æ–∫), current (—Ç–µ–∫—É—â–∏–µ), set (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å)')
    parser.add_argument('profile', nargs='?', help='–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏')
    
    args = parser.parse_args()
    
    if args.action == 'list':
        list_profiles()
    elif args.action == 'current':
        show_current()
    elif args.action == 'set':
        if not args.profile:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è")
            print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python set_quality_profile.py list - –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π")
            return
        apply_profile(args.profile)
    else:
        print("üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –∫–∞—á–µ—Å—Ç–≤–∞ –≤–∏–¥–µ–æ")
        print()
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python set_quality_profile.py list     - –ø–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏")
        print("  python set_quality_profile.py current  - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        print("  python set_quality_profile.py set <–ø—Ä–æ—Ñ–∏–ª—å> - –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
        print()
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python set_quality_profile.py set high_quality")
        print("  python set_quality_profile.py set balanced")
        print("  python set_quality_profile.py set optimized")

if __name__ == "__main__":
    main()
