#!/usr/bin/env python3
"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫
"""

import asyncio
import aiofiles
import json
import os
from datetime import datetime
from typing import List, Dict, Any

class VideoProcessingQueue:
    """–û—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ"""
    
    def __init__(self, max_concurrent=3):
        self.max_concurrent = max_concurrent
        self.queue_file = "video_queue.json"
        self.processing_file = "processing_status.json"
        self.completed_file = "completed_videos.json"
        
    async def add_to_queue(self, video_path: str, priority: int = 1) -> str:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ –≤ –æ—á–µ—Ä–µ–¥—å"""
        task_id = f"task_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{hash(video_path) % 10000}"
        
        task = {
            "id": task_id,
            "video_path": video_path,
            "priority": priority,
            "status": "queued",
            "created_at": datetime.now().isoformat(),
            "started_at": None,
            "completed_at": None,
            "error": None
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å
        queue = await self._load_queue()
        queue.append(task)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
        queue.sort(key=lambda x: x['priority'], reverse=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–µ—Ä–µ–¥—å
        await self._save_queue(queue)
        
        print(f"‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {task_id}")
        return task_id
    
    async def process_queue(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –≤–∏–¥–µ–æ"""
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ (–º–∞–∫—Å. {self.max_concurrent} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)...")
        
        while True:
            queue = await self._load_queue()
            processing = await self._load_processing()
            
            # –ù–∞—Ö–æ–¥–∏–º –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            queued_tasks = [t for t in queue if t['status'] == 'queued']
            active_tasks = [t for t in processing if t['status'] == 'processing']
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
            available_slots = self.max_concurrent - len(active_tasks)
            
            for task in queued_tasks[:available_slots]:
                await self._start_processing(task)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            await self._check_completed_tasks()
            
            if not queued_tasks and not active_tasks:
                print("‚úÖ –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
                await asyncio.sleep(5)
            else:
                await asyncio.sleep(2)
    
    async def _start_processing(self, task: Dict[str, Any]):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏"""
        task['status'] = 'processing'
        task['started_at'] = datetime.now().isoformat()
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ processing
        processing = await self._load_processing()
        processing.append(task)
        await self._save_processing(processing)
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        queue = await self._load_queue()
        queue = [t for t in queue if t['id'] != task['id']]
        await self._save_queue(queue)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(self._process_video(task))
        
        print(f"üé¨ –ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞: {task['id']}")
    
    async def _process_video(self, task: Dict[str, Any]):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∏–¥–µ–æ"""
        try:
            import sys
            sys.path.append('src')
            from dive_color_corrector.mobile_correct import analyze_video_mobile, process_video_mobile
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            input_path = task['video_path']
            output_path = input_path.replace('.mp4', '_processed.mp4')
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∏–¥–µ–æ
            video_data = analyze_video_mobile(input_path, output_path)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            result = process_video_mobile(video_data)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            task['status'] = 'completed'
            task['completed_at'] = datetime.now().isoformat()
            task['output_path'] = output_path
            task['result'] = result
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ completed
            completed = await self._load_completed()
            completed.append(task)
            await self._save_completed(completed)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ processing
            processing = await self._load_processing()
            processing = [t for t in processing if t['id'] != task['id']]
            await self._save_processing(processing)
            
            print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {task['id']}")
            
        except Exception as e:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            task['status'] = 'error'
            task['error'] = str(e)
            task['completed_at'] = datetime.now().isoformat()
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ completed —Å –æ—à–∏–±–∫–æ–π
            completed = await self._load_completed()
            completed.append(task)
            await self._save_completed(completed)
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ processing
            processing = await self._load_processing()
            processing = [t for t in processing if t['id'] != task['id']]
            await self._save_processing(processing)
            
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {task['id']}: {str(e)}")
    
    async def _check_completed_tasks(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞—á
        pass
    
    async def _load_queue(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å"""
        if os.path.exists(self.queue_file):
            async with aiofiles.open(self.queue_file, 'r') as f:
                content = await f.read()
                return json.loads(content)
        return []
    
    async def _save_queue(self, queue: List[Dict[str, Any]]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—á–µ—Ä–µ–¥—å"""
        async with aiofiles.open(self.queue_file, 'w') as f:
            await f.write(json.dumps(queue, indent=2))
    
    async def _load_processing(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –∑–∞–¥–∞—á"""
        if os.path.exists(self.processing_file):
            async with aiofiles.open(self.processing_file, 'r') as f:
                content = await f.read()
                return json.loads(content)
        return []
    
    async def _save_processing(self, processing: List[Dict[str, Any]]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –∑–∞–¥–∞—á"""
        async with aiofiles.open(self.processing_file, 'w') as f:
            await f.write(json.dumps(processing, indent=2))
    
    async def _load_completed(self) -> List[Dict[str, Any]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        if os.path.exists(self.completed_file):
            async with aiofiles.open(self.completed_file, 'r') as f:
                content = await f.read()
                return json.loads(content)
        return []
    
    async def _save_completed(self, completed: List[Dict[str, Any]]):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        async with aiofiles.open(self.completed_file, 'w') as f:
            await f.write(json.dumps(completed, indent=2))
    
    async def get_status(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏"""
        queue = await self._load_queue()
        processing = await self._load_processing()
        completed = await self._load_completed()
        
        return {
            "queued": len(queue),
            "processing": len(processing),
            "completed": len(completed),
            "queue_tasks": queue,
            "processing_tasks": processing,
            "recent_completed": completed[-10:] if completed else []
        }

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    parser = argparse.ArgumentParser(description='Video processing queue')
    parser.add_argument('--add', help='Add video to queue')
    parser.add_argument('--status', action='store_true', help='Show queue status')
    parser.add_argument('--start', action='store_true', help='Start processing queue')
    parser.add_argument('--max-concurrent', type=int, default=3, help='Max concurrent tasks')
    
    args = parser.parse_args()
    
    queue = VideoProcessingQueue(max_concurrent=args.max_concurrent)
    
    if args.add:
        task_id = await queue.add_to_queue(args.add)
        print(f"Task added: {task_id}")
    elif args.status:
        status = await queue.get_status()
        print(f"üìä –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏:")
        print(f"  ‚Ä¢ –í –æ—á–µ—Ä–µ–¥–∏: {status['queued']}")
        print(f"  ‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: {status['processing']}")
        print(f"  ‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {status['completed']}")
    elif args.start:
        await queue.process_queue()
    else:
        parser.print_help()

if __name__ == "__main__":
    asyncio.run(main())
