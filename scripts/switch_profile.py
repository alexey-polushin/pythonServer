#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""

import json
import sys
import os

def load_profiles():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    profiles_file = os.path.join(os.path.dirname(__file__), '..', 'config_profiles.json')
    with open(profiles_file, 'r') as f:
        return json.load(f)

def apply_profile(profile_name):
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    profiles = load_profiles()
    
    if profile_name not in profiles['profiles']:
        print(f"‚ùå –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print(f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏: {', '.join(profiles['profiles'].keys())}")
        return False
    
    profile = profiles['profiles'][profile_name]
    config = profile['config']
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    sys.path.append('src')
    from dive_color_corrector.mobile_correct import configure_performance
    
    configure_performance(
        batch_size=config['batch_size'],
        max_processes=config['max_processes'],
        video_quality=config['video_quality'],
        use_gpu=config['use_gpu']
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    config_file = "performance_config.json"
    with open(config_file, 'w') as f:
        json.dump({
            "batch_size": config['batch_size'],
            "max_processes": config['max_processes'],
            "video_quality": config['video_quality'],
            "use_gpu": config['use_gpu'],
            "profile": profile_name,
            "auto_configure": False
        }, f, indent=2)
    
    print(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å '{profile_name}' –ø—Ä–∏–º–µ–Ω–µ–Ω:")
    print(f"  ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {profile['name']}")
    print(f"  ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {profile['description']}")
    print(f"  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {profile['use_case']}")
    print(f"  ‚Ä¢ batch_size: {config['batch_size']}")
    print(f"  ‚Ä¢ max_processes: {config['max_processes']}")
    print(f"  ‚Ä¢ video_quality: {config['video_quality']}")
    print(f"  ‚Ä¢ use_gpu: {config['use_gpu']}")
    
    return True

def list_profiles():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π"""
    profiles = load_profiles()
    
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
    print("=" * 60)
    
    for key, profile in profiles['profiles'].items():
        print(f"üîß {key}")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {profile['name']}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {profile['description']}")
        print(f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {profile['use_case']}")
        print(f"   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: batch_size={profile['config']['batch_size']}, "
              f"max_processes={profile['config']['max_processes']}, "
              f"quality={profile['config']['video_quality']}")
        print()

def get_recommendation():
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    import multiprocessing as mp
    import psutil
    
    cpu_count = mp.cpu_count()
    memory_gb = psutil.virtual_memory().total / (1024**3)
    
    profiles = load_profiles()
    recommendations = profiles['recommendations']
    
    print(f"üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã:")
    print(f"  ‚Ä¢ CPU —è–¥–µ—Ä: {cpu_count}")
    print(f"  ‚Ä¢ RAM: {memory_gb:.1f} GB")
    print()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
    if cpu_count >= 8 and memory_gb >= 16:
        recommended = "8_cores_16gb"
    elif cpu_count >= 4 and memory_gb >= 8:
        recommended = "4_cores_8gb"
    else:
        recommended = "2_cores_4gb"
    
    recommendation = recommendations[recommended]
    profile_name = recommendation['profile']
    reason = recommendation['reason']
    
    print(f"üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø—Ä–æ—Ñ–∏–ª—å: {profile_name}")
    print(f"   –ü—Ä–∏—á–∏–Ω–∞: {reason}")
    print()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è
    profile = profiles['profiles'][profile_name]
    print(f"üìä –î–µ—Ç–∞–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è:")
    print(f"   ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {profile['name']}")
    print(f"   ‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {profile['description']}")
    print(f"   ‚Ä¢ batch_size: {profile['config']['batch_size']}")
    print(f"   ‚Ä¢ max_processes: {profile['config']['max_processes']}")
    print(f"   ‚Ä¢ video_quality: {profile['config']['video_quality']}")
    print(f"   ‚Ä¢ use_gpu: {profile['config']['use_gpu']}")
    
    return profile_name

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    parser = argparse.ArgumentParser(description='Switch performance profiles')
    parser.add_argument('profile', nargs='?', help='Profile name to apply')
    parser.add_argument('--list', action='store_true', help='List available profiles')
    parser.add_argument('--recommend', action='store_true', help='Get recommendation for current system')
    parser.add_argument('--auto', action='store_true', help='Apply recommended profile automatically')
    
    args = parser.parse_args()
    
    if args.list:
        list_profiles()
    elif args.recommend:
        get_recommendation()
    elif args.auto:
        recommended = get_recommendation()
        apply_profile(recommended)
    elif args.profile:
        apply_profile(args.profile)
    else:
        print("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        print()
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python scripts/switch_profile.py <profile_name>  # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
        print("  python scripts/switch_profile.py --list          # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏")
        print("  python scripts/switch_profile.py --recommend     # –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é")
        print("  python scripts/switch_profile.py --auto          # –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π")
        print()
        get_recommendation()

if __name__ == "__main__":
    main()
