#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–±–∏–ª—å–Ω–æ–≥–æ API
"""

import requests
import json
import os
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://95.81.76.7:8000"

def test_mobile_status():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–±–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å endpoint"""
    print("üì± –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–±–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å...")
    try:
        response = requests.get(f"{API_BASE_URL}/api/mobile/status")
        if response.status_code == 200:
            print("‚úÖ –ú–æ–±–∏–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω")
            data = response.json()
            print(f"üìä –°—Ç–∞—Ç—É—Å: {data['status']}")
            print(f"üìä –í–µ—Ä—Å–∏—è: {data['version']}")
            print(f"üìä –§—É–Ω–∫—Ü–∏–∏: {data['features']}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_mobile_health():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–±–∏–ª—å–Ω—ã–π health check"""
    print("\nüè• –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–±–∏–ª—å–Ω—ã–π health check...")
    try:
        response = requests.get(f"{API_BASE_URL}/api/mobile/health")
        if response.status_code == 200:
            print("‚úÖ –ú–æ–±–∏–ª—å–Ω—ã–π health check –ø—Ä–æ—à–µ–ª")
            data = response.json()
            print(f"üìä –°—Ç–∞—Ç—É—Å: {data['status']}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ health check: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_mobile_image_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–±–∏–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    print("\nüñºÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–±–∏–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    test_image_path = "test_image.jpg"
    if not os.path.exists(test_image_path):
        print("‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return False
    
    try:
        with open(test_image_path, "rb") as f:
            files = {"file": ("test_image.jpg", f, "image/jpeg")}
            response = requests.post(
                f"{API_BASE_URL}/api/mobile/process/image",
                files=files
            )
        
        if response.status_code == 200:
            print("‚úÖ –ú–æ–±–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            result = response.json()
            if result.get("success"):
                data = result["data"]
                print(f"üìä –°—Ç–∞—Ç—É—Å: {data.get('status', 'unknown')}")
                print(f"üìä –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {data.get('output_filename', 'unknown')}")
                print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {data.get('file_size', 0)} bytes")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {result.get('error', 'unknown')}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.status_code}")
            print(f"üìã –û—Ç–≤–µ—Ç: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return False

def test_mobile_file_listing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –º–æ–±–∏–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
    print("\nüìÅ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–±–∏–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤...")
    
    try:
        response = requests.get(f"{API_BASE_URL}/api/mobile/files")
        
        if response.status_code == 200:
            print("‚úÖ –ú–æ–±–∏–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ")
            result = response.json()
            if result.get("success"):
                data = result["data"]
                files = data.get("files", [])
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {data.get('count', 0)}")
                for file_info in files[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ñ–∞–π–ª–∞
                    print(f"  - {file_info['filename']} ({file_info['size']} bytes)")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞: {result.get('error', 'unknown')}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤: {e}")
        return False

def test_video_streaming():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç streaming –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ"""
    print("\nüé• –¢–µ—Å—Ç–∏—Ä—É–µ–º streaming –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ
    test_video_path = "test_video.mp4"
    if not os.path.exists(test_video_path):
        print("‚ùå –¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return False
    
    try:
        with open(test_video_path, "rb") as f:
            files = {"file": ("test_video.mp4", f, "video/mp4")}
            response = requests.post(
                f"{API_BASE_URL}/api/process/video",
                files=files,
                stream=True
            )
        
        if response.status_code == 200:
            print("‚úÖ Streaming –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –Ω–∞—á–∞–ª–∞—Å—å")
            print("üìä –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å...")
            
            for line in response.iter_lines():
                if line:
                    line_str = line.decode('utf-8')
                    if line_str.startswith('data: '):
                        try:
                            data = json.loads(line_str[6:])  # –£–±–∏—Ä–∞–µ–º 'data: '
                            if data.get("status") == "analyzing":
                                print(f"üìä –ê–Ω–∞–ª–∏–∑: {data.get('frames_processed', 0)} –∫–∞–¥—Ä–æ–≤")
                            elif data.get("status") == "processing":
                                print(f"üìä –û–±—Ä–∞–±–æ—Ç–∫–∞: {data.get('progress', 0):.1f}%")
                            elif data.get("status") == "success":
                                print("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                                print(f"üìä –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª: {data.get('output_filename', 'unknown')}")
                                break
                        except json.JSONDecodeError:
                            continue
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ API"""
    print("üì± –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ API")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–±–∏–ª—å–Ω—ã–µ endpoints
    test_mobile_status()
    test_mobile_health()
    test_mobile_file_listing()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
    if os.path.exists("test_image.jpg"):
        test_mobile_image_processing()
    else:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–æ–∑–¥–∞–π—Ç–µ test_image.jpg –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ)
    if os.path.exists("test_video.mp4"):
        test_video_streaming()
    else:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –°–æ–∑–¥–∞–π—Ç–µ test_video.mp4 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API: {API_BASE_URL}/docs")

if __name__ == "__main__":
    main()
